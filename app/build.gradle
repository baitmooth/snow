apply plugin: 'com.android.application'

// build.gradle in the 'app' module
android {
	compileSdk rootProject.ext.CompileSdk
	
	defaultConfig {
		applicationId 'org.baitmooth.snow'
		minSdkVersion rootProject.ext.MinSdk
		targetSdkVersion rootProject.ext.TargetSdk
		versionCode 4
		versionName '1.3.9'
		multiDexEnabled true
		// Naming app bundles
		setArchivesBaseName("${parent.name}-v${versionName}")
	}
	
	// Create a variable called keystorePropertiesFile, and initialize it to the
	// keystore.properties file, in the rootProject folder.
	def keystorePropertiesFile = rootProject.file("keystore.properties")
	def releaseSigning;
	if (keystorePropertiesFile.exists()){
		def keystoreProperties = new Properties()
		keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
		releaseSigning = signingConfigs.create("release", signingConfig -> {
		signingConfig.setKeyAlias(keystoreProperties.getProperty("keyAlias"));
		signingConfig.setKeyPassword(keystoreProperties.getProperty("keyPassword"));
		signingConfig.setStoreFile(rootProject.file(keystoreProperties.getProperty("storeFile")));
		signingConfig.setStorePassword(keystoreProperties.getProperty("storePassword"));
		});
	} else {releaseSigning = signingConfigs.getByName("debug"); // Use getByName for safety
	}
	
	bundle {
		language {
			enableSplit false
		}
	}
	
	buildTypes {
		release {
			debuggable false
			minifyEnabled false
			signingConfig = releaseSigning
		}
		
		debug {
			debuggable true
			minifyEnabled false
		}
		applicationVariants.all { variant ->

			if (variant.flavorName == "you") {
				variant.preBuildProvider.get().dependsOn(":preparehelper:runyou")
			}else if (variant.flavorName == "normal") {
				variant.preBuildProvider.get().dependsOn(":preparehelper:runnormal")
			}
			// Add more conditions for additional flavors
		}
	}

	flavorDimensions += "variant"
	productFlavors {
		normal {
			dimension "variant"
			resValue "string", "app_name", "Snow"
		}
		you {
			dimension "variant"
			minSdkVersion "26"
			applicationIdSuffix '.you'
			resValue "string", "app_name", "Snow Material You"
		}

	}

	sourceSets {
		normal { res.srcDirs = ['src/normal/res'] }
		you { res.srcDirs = ['src/you/res'] }
	}

	namespace 'org.baitmooth.snow'
	compileOptions {
		encoding = 'UTF-8'
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}
}

dependencies {

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.github.donnnno:candybar-foss:3.20.2'
}



// Code for automatically copying appfilter.xml and drawable.xml
// from `res/xml` directory to `assets` directory
tasks.register('copyXMLs') {
    ['appfilter.xml', 'drawable.xml'].each { file ->
        copy {
            from "$projectDir/src/main/res/xml/$file"
            into "$projectDir/src/main/assets/"
        }
    }
}

tasks.configureEach { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn copyXMLs
		task.dependsOn(':preparehelper:runnormal')
    }
}
